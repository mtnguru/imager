<?php

/**
 * @file
 * Provides full image viewing and editing capability from a page of thumbnails.
 */

/**
 * Implements hook_init().
 */
function imager_init() {
}

/**
 * Implements hook_menu().
 */
function imager_menu() {
  // Administer configuration settings for Imager module.
  $items['admin/config/media/imager'] = array(
    'title' => 'Imager',
    'description' => 'Configure Imager module paths and settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imager_admin_form'),
    'file' => 'imager.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  // AJAX - Retrieve a rendered file_entity.
  $items['imager/ajax/display_entity'] = array(
    'title' => 'Display file_entity',
    'description' => 'Retrieve a rendered file_entity',
    'page callback' => 'imager_display_entity',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // AJAX - Display map showing location of current image.
  $items['imager/ajax/display_map'] = array(
    'title' => 'Display Map',
    'description' => 'Display a map of where this image was taken',
    'page callback' => 'imager_display_map',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // AJAX - Overwrite or save a new image file and the file_entity.
  $items['imager/ajax/save_image'] = array(
    'title' => 'Save edited image file',
    'description' => 'Save an edited image file back into Drupal',
    'page callback' => 'imager_save_image',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // AJAX - Attach image to outgoing email message in users email client.
  $items['imager/ajax/email_file'] = array(
    'title' => 'Email edited image file',
    'description' => 'Start users default email client with subject, body and image attached.',
    'page callback' => 'imager_email_file',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // AJAX - Display image and rendered file_entity in a new browser window.
  $items['imager/ajax/view_browser'] = array(
    'title' => 'View Image natively in Browser',
    'description' => 'Save image so it can be displayed natively in browser, then copied or printed.',
    'page callback' => 'imager_view_browser',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // AJAX - Retrieve a rendered file_entity form.
  $items['imager/ajax/edit_form_load'] = array(
    'title' => 'Retrieve the edit form for a file_entity',
    'description' => 'Retrieve the edit form for a file_entity',
    'page callback' => 'imager_edit_form_load',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // AJAX - Retrieve a field from a rendered file_entity form.
  $items['imager/ajax/edit_form_field_load'] = array(
    'title' => 'Retrieve a field from the edit form',
    'description' => 'Retrieve a field from the edit form.',
    'page callback' => 'imager_edit_form_field_load',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // AJAX - Delete a file_entity and it's image file.
  $items['imager/ajax/delete_file'] = array(
    'title' => 'Delete a file_entity from Drupal',
    'description' => 'Delete a file_entity from Drupal',
    'page callback' => 'imager_delete_file',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // AJAX - Save a file_entity field.
  $items['imager/ajax/save_file_entity_field'] = array(
    'title' => 'Save file_entity field',
    'description' => 'Save a file_entity field',
    'page callback' => 'imager_save_file_entity_field',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // AJAX - Load Dialog.
  $items['imager/ajax/render_dialog'] = array(
    'title' => 'Load dialog',
    'description' => 'Render the contents for a dialog and return it.',
    'page callback' => 'imager_render_dialog',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements HOOK_views_pre_view().
 *
 * Determine if this view needs imager module, if so set $_imager_enable = true.
 */
function imager_views_pre_view(&$view, &$display_id, &$args) {
  global $_imager_enable;
  if (preg_match('/' . variable_get('imager_views_css_class') . '/',
    $view->display['default']->display_options['css_class'])) {
    if (!preg_match('/browser/', $view->name)) {
      $_imager_enable = TRUE;
    }
  }
  return;
}

/**
 * Implements HOOK_theme().
 */
function imager_theme() {
  return array(
    'imager_add_button' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements HOOK_page_alter().
 *
 * If some other hook has enabled the Imager module, build the wrapper DIV
 * that will contain the Imager HTML.
 *
 * @param $page
 */
function imager_page_alter(&$page) {
  global $_imager_enable;
  if (isset($_imager_enable)) {
    module_load_include('inc', 'imager', 'imager.popups');
    _imager_build_wrapper($page);
  }
}

/**
 * Form constructor for the file edit form.
 *
 * @todo - James Test to see if this function is still used.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 */
function imager_file_entity_edit($form, &$form_state) {
  // @todo What happened to the file.  I don't think this function is used anymore.
  // drupal_set_title(t('<em>Edit @type</em> @title', array('@type' => $file->type, '@title' => $file->filename)), PASS_THROUGH);
  $form['#attributes']['class'][] = 'file-form';

  // Basic file information.
  // These elements are just values so they are not even sent to the client.
  foreach (array('fid', 'type', 'uid', 'timestamp') as $key) {
    $form[$key] = array(
      '#type' => 'value',
      //    '#value' => isset($file->$key) ? $file->$key : NULL,
    );
  }

  $form['filename'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    //  '#default_value' => $file->filename,
    '#required' => TRUE,
    '#maxlength' => 255,
    '#weight' => -10,
  );

  //$form['preview'] = file_view_file($file, 'preview');
  $form['additional_settings'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 99,
  );

  // File destination information for administrators.
  $form['destination'] = array(
    '#type' => 'fieldset',
    //  '#access' => user_access('administer files') && file_entity_file_is_writeable($file),
    '#title' => t('Destination'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('file-form-destination'),
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'file_entity') . '/file_entity.js',
      ),
    ),
  );

  $options = array();
  foreach (file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE) as $scheme => $info) {
    $options[$scheme] = check_plain($info['name']);
  }

  $form['destination']['scheme'] = array(
    '#type' => 'radios',
    '#title' => t('Destination'),
    '#options' => $options,
    //  '#default_value' => file_uri_scheme($file->uri),
  );

  // File user information for administrators/
  $form['user'] = array(
    '#type' => 'fieldset',
    '#access' => user_access('administer files'),
    '#title' => t('User information'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('file-form-user'),
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'file_entity') . '/file_entity.js',
        array(
          'type' => 'setting',
          'data' => array('anonymous' => variable_get('anonymous', t('Anonymous'))),
        ),
      ),
    ),
    '#weight' => 90,
  );
  $form['user']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Associated with'),
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
    // '#default_value' => !empty($file->uid) ? user_load($file->uid)->name : '',
    '#weight' => -1,
    '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
  );

  // Add the buttons.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 5,
    '#submit' => array('file_entity_edit_submit'),
  );
  $form['actions']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#weight' => 10,
    '#submit' => array('file_entity_edit_delete_submit'),
    //  '#access' => file_entity_access('delete', $file),
  );

  //$langcode = function_exists('entity_language') ? entity_language('file', $file) : NULL;
  //field_attach_form('file', $file, $form, $form_state, $langcode);
  return $form;
}

/**
 * Implements HOOK_entity_info_alter().
 *
 * Adds view modes to file entities.
 *
 * @param array $entity_info
 */
function imager_entity_info_alter(&$entity_info) {
  //Not sure if it's still an issue, but a previous commenter noted that Media module only recognizes view modes with the prefix media_. Also, as you can see by the entity type 'file', this is for after the switch-to-file-entity patch.
  $entity_info['file']['view modes']['media_imager_info'] = array(
    'label' => t('Imager Info'),
    'custom settings' => TRUE,
  );
  $entity_info['file']['view modes']['media_imager_email'] = array(
    'label' => t('Imager Email'),
    'custom settings' => TRUE,
  );
  $entity_info['file']['view modes']['media_imager_browser'] = array(
    'label' => t('Imager Browser'),
    'custom settings' => TRUE,
  );
//$entity_info['file']['view modes']['media_imager_map'] = array(
//  'label' => t('Imager Map'),
//  'custom settings' => TRUE,
//);
}

/**
 * Implements hook_file_view_alter
 *
 * Add filename, owner, filesize, fid and image geometry to the file view.
 *
 * @param $build
 * @param $type
 */
function imager_file_view_alter(&$build, $type) {
  // Exit if view_mode != configured view mode for information dialog
  if ($build['#view_mode'] !== variable_get('imager_information_view_mode')) {
    return $build;
  }
  $file = $build['#file'];
  $geometry = $file->metadata['width'] . ' x ' . $geometry = $file->metadata['height'];

  if ($file->filesize > 1000000) {
    $filesize = (round($file->filesize / 100000) / 10) . ' MB';
  }
  else {
    $filesize = (round($file->filesize / 100) / 10) . ' KB';
  }

  if (isset($build['field_description'])) {
    $build['field_description']['#prefix'] = '<br>';
  }
  $build['sfield_filename'] = array(
    '#access' => 1,
    '#bundle' => 'image',
    '#entity_type' => 'file',
    '#field_name' => 'sfield_filename',
    '#field_type' => 'text',
    '#formatter' => 'text_default',
    '#items' => array('anything'),
    '#prefix' => '<br>',
    '#label_display' => 'inline',
    '#theme' => 'field',
    '#title' => 'File Name',
    '#optional' => TRUE,
    '#weight' => 20,
    0 => array(
      '#markup' => $file->filename,
    ),
  );
  $build['sfield_owner'] = array(
    '#access' => 1,
    '#bundle' => 'image',
    '#entity_type' => 'file',
    '#field_name' => 'sfield_owner',
    '#field_type' => 'text',
    '#formatter' => 'text_default',
    '#items' => array('anything'),
    '#label_display' => 'inline',
    '#theme' => 'field',
    '#title' => 'File Owner',
    '#optional' => TRUE,
    '#weight' => 21,
    0 => array(
      '#markup' => user_load($file->uid)->name,
    ),
  );
  $build['sfield_filesize'] = array(
    '#access' => 1,
    '#bundle' => 'image',
    '#entity_type' => 'file',
    '#field_name' => 'sfield_filesize',
    '#field_type' => 'text',
    '#formatter' => 'text_default',
    '#items' => array('anything'),
    '#label_display' => 'inline',
    '#theme' => 'field',
    '#title' => 'File Size',
    '#optional' => TRUE,
    '#weight' => 23,
    0 => array(
      '#markup' => $filesize,
    ),
  );
  $build['sfield_geometry'] = array(
    '#access' => 1,
    '#bundle' => 'image',
    '#entity_type' => 'file',
    '#field_name' => 'sfield_geometry',
    '#field_type' => 'text',
    '#formatter' => 'text_default',
    '#items' => array('anything'),
    '#label_display' => 'inline',
    '#theme' => 'field',
    '#title' => 'Geometry',
    '#optional' => TRUE,
    '#weight' => 24,
    0 => array(
      '#markup' => $geometry,
    ),
  );
  $build['sfield_fid'] = array(
    '#access' => 1,
    '#bundle' => 'image',
    '#entity_type' => 'file',
    '#field_name' => 'sfield_fid',
    '#field_type' => 'text',
    '#formatter' => 'text_default',
    '#items' => array('anything'),
    '#label_display' => 'inline',
    '#theme' => 'field',
    '#title' => 'File ID',
    '#optional' => TRUE,
    '#weight' => 25,
    0 => array(
      '#markup' => $file->fid,
    ),
  );
}

/**
 * Check if a library variant has been installed.
 *
 * @param $library
 *   Library info array.
 * @param $variant
 *   Variant name.
 *
 * @return
 *   TRUE if the variant exists, FALSE otherwise.
 */
function imager_library_detect_variant($library, $variant) {
  if (!empty($library['variants'][$variant]['files'])) {
    $files = $library['variants'][$variant]['files'];

    foreach (array('js', 'css') as $type) {
      if (!empty($files[$type])) {
        reset($files[$type]);
        return file_exists(DRUPAL_ROOT . '/' . $library['library path'] . '/' . key($files[$type]));
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_libraries_info().
 */
function imager_libraries_info() {
  $libraries = array();

  $libraries['jquery.imgareaselect'] = array(
    'name' => 'jQuery imgAreaSelect',
    'vendor url' => 'http://odyniec.net/projects/imgareaselect',
    'version callback' => 'libraries_get_version',
    'version arguments' => array(
      'file' => 'scripts/jquery.imgareaselect.js',
      'pattern' => '#version ([0-9\.]+)#',
      'lines' => 10,
      'cols' => 20,
    ),
    'files' => array(
      'js' => array(
        'scripts/jquery.imgareaselect.js',
      ),
      'css' => array(
        'css/imgareaselect-animated.css',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'scripts/jquery.imgareaselect.min.js',
          ),
          'css' => array(
            'css/imgareaselect-animated.css',
          ),
        ),
        'variant callback' => 'imager_library_detect_variant',
        'variant arguments' => array(),
      ),
      'packed' => array(
        'files' => array(
          'js' => array(
            'scripts/jquery.imgareaselect.pack.js',
          ),
          'css' => array(
            'css/imgareaselect-animated.css',
          ),
        ),
        'variant callback' => 'imager_library_detect_variant',
        'variant arguments' => array(),
      ),
    ),
  );

  return $libraries;
}
