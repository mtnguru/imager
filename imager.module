<?php

/**
 * @file
 * Provides full image viewing and editing capability from a page of thumbnails.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_help().
 */
function imager_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the imager module.
    case 'help.page.imager':
      $output = <<<EOT
<h3><strong>Overview</strong></h3>

<p>The Imager module implements a Field Formatter that displays media entity images using the standard Drupal image styles.&nbsp; When a user clicks on an image a full screen viewer is popped up which displays the image in full resolution.&nbsp; The user can zoom in and out, pan around the image, and edit the image.&nbsp; Edits include rotation, cropping, changing the brightness/contrast and the hue/saturation/lightness.&nbsp; An edited image can then be stored back to Drupal overwriting an existing media entity or by creating a new one.</p>

<h3><strong>User Instructions</strong></h3>

<ul>
	<li>Click on an image to display it full resolution in the&nbsp;imager viewer/editor.</li>
	<li>Press ESCAPE, 'X' or double click in the imager viewer to close the viewer.</li>
	<li>Hold down the left mouse button and drag to pan around the image.</li>
	<li>Use the mouse thumbwheel to zoom in and out. &nbsp;Or hold down the SHIFT key and left mouse button and then drag the mouse to zoom.<br />&nbsp;</li>
	<li>Press the left or right arrow keys to view the previous or next image.</li>
	<li>Press the 'R' key to reset the image and clear all edits.</li>
	<li>Press the 'F' key to toggle full screen mode.<br />&nbsp;</li>
	<li><img alt="" src="/images/redx.png" /> Close the Viewer popup.</li>
	<li><img alt="" src="/images/left_arrow.png" />&nbsp;<img alt="" src="/images/right_arrow.png" /> Select the previous or next image from the source page - You can also press the left and right arrow keys.<br />
	&nbsp;</li>
	<li><img alt="" src="/images/newtab.png" /> View image in a new tab - Useful for printing just the image.</li>
	<li><img alt="" src="/images/information.png" /> View information about this image.</li>
	<li><img alt="" src="/images/slideshow.png" /> View images in a slideshow.</li>
	<li><img alt="" src="/images/fullscreen.png" />&nbsp;Toggle fullscreen mode.&nbsp; You can also press the \'F\' key</li>
	<li><img alt="" src="/images/zoomin.png" />&nbsp;<img alt="" src="/images/zoomout.png" /> Zoom in and out.<br />
	&nbsp;</li>
	<li><img alt="" src="/images/frame.png" /> Click on the frame to select an area to crop. Click on the <img alt="" src="/images/scissors.png" /> scissors to complete the crop.</li>
	<li><img alt="" src="/images/color_wheel.png" /> Change the Hue/Saturation/Lightness.</li>
	<li><img alt="" src="/images/contrast.png" /> Change the Brightness/Contrast.</li>
	<li><img alt="" src="/images/rotate-left.png" />&nbsp;<img alt="" src="/images/rotate-right.png" /> Rotate the image right or left 90 degrees.</li>
	<li><img alt="" src="/images/reset.png" />&nbsp;Reset image back the the original. &nbsp;All edits, cropping, panning and zooming are cleared. &nbsp;<br />
	&nbsp;</li>
	<li><img alt="" src="/images/db_add.png" /> Save the edited image back to Drupal.</li>
	<li><img alt="" src="/images/download.png" /> Download the image to your local PC.</li>
	<li><img alt="" src="/images/configure.png" /> Configure local settings for the Imager Viewer<br />
	&nbsp;</li>
	<li><img alt="" src="/images/bug.png" /> View the status of the viewer - used for debugging.</li>
</ul>

<h3><strong>Future Plans</strong></h3>

<ul>
	<li>Make it mobile - remove the left button sidebar and replace with 3 or 4 buttons that overlay the image.&nbsp; When a user clicks on a button the set of buttons associated with it is displayed in a popup.</li>
	<li>Get full screen mode working.....again. - DONE!</li>
	<li>Display additional media_entity fields in a popup.&nbsp; Allow users to edit those fields in-place.</li>
	<li>Provide button to popup a map showing locations of all images found on the source screen.&nbsp; Clicking on an image map marker changes the currently displayed image.</li>
	<li>Add annotations - users can add simple text, arrows and simple geometric shapes to an image.</li>
	<li>Get rid of the fullscreen.js library - it doesn\'t really do much.</li>
</ul>

<h3><strong>Help Needed</strong></h3>

<p>I plan to make this into a contrib module on D.O.&nbsp; Since this is the first module I\'ve submitted it has to go through the Project Application Process.&nbsp;Any help I can get with this process would be greatly appreciated.</p>

<h3><strong>Details</strong></h3>

<p>Lines of JavaScript - 3700<br />
Lines of PHP - 1500</p>

<p>The Imager module uses the HTML5 canvas to manipulate images.&nbsp; The only JavaScript libraries it uses are jQuery&nbsp;and the jQuery.imgareaselect plugin.</p>

<p>All editing of images is done with JavaScript in the browser.&nbsp; AJAX is used to load new images and save edited images back to Drupal.</p>

<p>The Imager dialog allows users to view, delete, and edit images for all images on a page without ever loading a new page.</p>';
EOT;
//    $output .= '<h3>' . t('About') . '</h3>';
//    $output .= '<p>' . t('Displays images at full resolution in a popup.  Users can pan, zoom, rotate, crop and change brightness/contrast and hue/saturation/lightness.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function imager_theme() {
  return array(
    'imager_formatter' => array(
      'variables' => array('item' => NULL, 'item_attributes' => NULL, 'url' => NULL, 'image_style' => NULL),
      'file' => 'imager.field.inc',
    ),
  );
}

/**
 * Implements hook_entity_presave().
 */
// function imager_entity_presave(EntityInterface $entity) {
//   return;
// }

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * FORM ID: media_image_form
 * Set default photographer to be the logged in user.
 */
function imager_form_media_image_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['field_photographer']['widget'][0]['target_id']['#default_value'] = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  $form['#submit'][] = 'imager_form_media_image_form_submit';
}

/**
 * 'media_image_form' submit function.
 *
 * If user did not set the image 'alt' field then set it from the Media name field.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function imager_form_media_image_form_submit($form, FormStateInterface $form_state) {

  return;
}

/**
 * Implements hook_views_pre_view().
 *
 * Determine if this view needs imager module, if so set $_imager_enable = true.
 */
function imager_views_pre_view($view, $display_id, &$args) {
//global $_imager_enable;
//if (preg_match('/' . variable_get('imager_views_css_class') . '/',
//  $view->display['default']->display_options['css_class'])) {
//  if (!preg_match('/browser/', $view->name)) {
//    $_imager_enable = TRUE;
//  }
//}
}

/**
 * Implements hook_page_alter().
 *
 * If some other hook has enabled the Imager module, build the wrapper DIV
 * that will contain the Imager HTML.
 */
function imager_page_alter(array &$page) {
}

/**
 * Form constructor for the file edit form.
 *
 * @param array $form
 *   Form.
 * @param array $form_state
 *   Form state.
 *
 * @return array $form
 *   Return the form render array.
 */
function imager_file_entity_edit(array $form, array &$form_state) {
/*
  $form['#attributes']['class'][] = 'file-form';

  // Basic file information.
  // These elements are just values so they are not even sent to the client.
  foreach (array('fid', 'type', 'uid', 'timestamp') as $key) {
    $form[$key] = array(
      '#type' => 'value',
      // '#value' => isset($file->$key) ? $file->$key : NULL, .
    );
  }

  $form['filename'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    // '#default_value' => $file->filename, .
    '#required' => TRUE,
    '#maxlength' => 255,
    '#weight' => -10,
  );

  // $form['preview'] = file_view_file($file, 'preview'); .
  $form['additional_settings'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 99,
  );

  // File destination information for administrators.
  $form['destination'] = array(
    '#type' => 'fieldset',
    '#title' => t('Destination'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('file-form-destination'),
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'file_entity') . '/file_entity.js',
      ),
    ),
  );

  $options = array();
  foreach (file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE) as $scheme => $info) {
    $options[$scheme] = check_plain($info['name']);
  }

  $form['destination']['scheme'] = array(
    '#type' => 'radios',
    '#title' => t('Destination'),
    '#options' => $options,
    // '#default_value' => file_uri_scheme($file->uri), .
  );

  // File user information for administrators/ .
  $form['user'] = array(
    '#type' => 'fieldset',
    '#access' => user_access('administer files'),
    '#title' => t('User information'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('file-form-user'),
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'file_entity') . '/file_entity.js',
        array(
          'type' => 'setting',
          'data' => array('anonymous' => variable_get('anonymous', t('Anonymous'))),
        ),
      ),
    ),
    '#weight' => 90,
  );
  $form['user']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Associated with'),
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
    '#weight' => -1,
    '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
  );

  // Add the buttons.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 5,
    '#submit' => array('file_entity_edit_submit'),
  );
  $form['actions']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#weight' => 10,
    '#submit' => array('file_entity_edit_delete_submit'),
    // '#access' => file_entity_access('delete', $file), .
  );
  return $form;
*/
}

/**
 * Implements hook_entity_info_alter().
 *
 * Adds view modes to file entities.
 */
function imager_entity_info_alter(array &$entity_info) {
  $entity_info['media']['view modes']['media_imager_info'] = array(
    'label' => t('Imager Info'),
    'custom settings' => TRUE,
  );
  $entity_info['media']['view modes']['media_imager_map'] = array(
    'label' => t('Imager Map'),
    'custom settings' => TRUE,
  );
  return;
//$entity_info['file']['view modes']['media_imager_email'] = array(
//  'label' => t('Imager Email'),
//  'custom settings' => TRUE,
//);
//$entity_info['media']['view modes']['media_imager_browser'] = array(
//  'label' => t('Imager Browser'),
//  'custom settings' => TRUE,
//);
}

function imager_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  return;
}

/**
 * Implements HOOK_node_view().
 *
 * @param array $build
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 * @param $view_mode
 */
function imager_node_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  return;
}
/**
 * Implements HOOK_user_view_alter().
 *
 * @param array $build
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 * @param $view_mode
 */
function imager_user_view_alter(array &$build, UserInterface $account, EntityViewDisplayInterface $display) {
  return;
}
/**
 * Implements hook_file_view_alter().
 *
 * Add filename, owner, filesize, fid and image geometry to the file view.
 */
function imager_file_view_alter(array &$build, $type) {
/*
  // Exit if view_mode != configured view mode for information dialog.
  if ($build['#view_mode'] !== variable_get('imager_information_view_mode')) {
    return $build;
  }
  $file = $build['#file'];
  $geometry = $file->metadata['width'] . ' x ' . $geometry = $file->metadata['height'];

  if ($file->filesize > 1000000) {
    $filesize = (round($file->filesize / 100000) / 10) . ' MB';
  }
  else {
    $filesize = (round($file->filesize / 100) / 10) . ' KB';
  }

  if (isset($build['field_description'])) {
    $build['field_description']['#prefix'] = '<br>';
  }
  $build['sfield_filename'] = array(
    '#access' => 1,
    '#bundle' => 'image',
    '#entity_type' => 'file',
    '#field_name' => 'sfield_filename',
    '#field_type' => 'text',
    '#formatter' => 'text_default',
    '#items' => array('anything'),
    '#prefix' => '<br>',
    '#label_display' => 'inline',
    '#theme' => 'field',
    '#title' => 'File Name',
    '#optional' => TRUE,
    '#weight' => 20,
    0 => array(
      '#markup' => $file->filename,
    ),
  );
  $build['sfield_owner'] = array(
    '#access' => 1,
    '#bundle' => 'image',
    '#entity_type' => 'file',
    '#field_name' => 'sfield_owner',
    '#field_type' => 'text',
    '#formatter' => 'text_default',
    '#items' => array('anything'),
    '#label_display' => 'inline',
    '#theme' => 'field',
    '#title' => 'File Owner',
    '#optional' => TRUE,
    '#weight' => 21,
    0 => array(
      '#markup' => user_load($file->uid)->name,
    ),
  );
  $build['sfield_filesize'] = array(
    '#access' => 1,
    '#bundle' => 'image',
    '#entity_type' => 'file',
    '#field_name' => 'sfield_filesize',
    '#field_type' => 'text',
    '#formatter' => 'text_default',
    '#items' => array('anything'),
    '#label_display' => 'inline',
    '#theme' => 'field',
    '#title' => 'File Size',
    '#optional' => TRUE,
    '#weight' => 23,
    0 => array(
      '#markup' => $filesize,
    ),
  );
  $build['sfield_geometry'] = array(
    '#access' => 1,
    '#bundle' => 'image',
    '#entity_type' => 'file',
    '#field_name' => 'sfield_geometry',
    '#field_type' => 'text',
    '#formatter' => 'text_default',
    '#items' => array('anything'),
    '#label_display' => 'inline',
    '#theme' => 'field',
    '#title' => 'Geometry',
    '#optional' => TRUE,
    '#weight' => 24,
    0 => array(
      '#markup' => $geometry,
    ),
  );
  $build['sfield_fid'] = array(
    '#access' => 1,
    '#bundle' => 'image',
    '#entity_type' => 'file',
    '#field_name' => 'sfield_fid',
    '#field_type' => 'text',
    '#formatter' => 'text_default',
    '#items' => array('anything'),
    '#label_display' => 'inline',
    '#theme' => 'field',
    '#title' => 'File ID',
    '#optional' => TRUE,
    '#weight' => 25,
    0 => array(
      '#markup' => $file->fid,
    ),
  );
*/
}

/**
 * Check if a library variant has been installed.
 *
 * @param array $library
 *   Library info array.
 * @param string $variant
 *   Variant name.
 *
 * @return bool
 *   TRUE if the variant exists, FALSE otherwise.
 */
function imager_library_detect_variant(array $library, $variant) {
/*
  if (!empty($library['variants'][$variant]['files'])) {
    $files = $library['variants'][$variant]['files'];

    foreach (array('js', 'css') as $type) {
      if (!empty($files[$type])) {
        reset($files[$type]);
        return file_exists(DRUPAL_ROOT . '/' . $library['library path'] . '/' . key($files[$type]));
      }
    }
  }

  return FALSE;
*/
}


