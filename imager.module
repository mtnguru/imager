<?php
/**
 * @file
 * Provides full image viewing and editing capability from a page of thumbnails
 */  

/**
 * Implement hook_init
 */
function imager_init( ) {
  return;
}

/**
 * Implement hook_menu
 */
function imager_menu( ) {
  $items = array();

  // Retrieve a rendered file_entity
  $items['imager/ajax/display_entity'] = array(
    'title' => 'Display file_entity',
    'description' => 'Retrieve a rendered file_entity',
    'page callback' => 'displayEntity',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // Overwrite or save a new image file and the file_entity
  $items['imager/ajax/save_file'] = array(                                         
    'title' => 'Save edited image file',
    'description' => 'Save an edited image file back into Drupal',
    'page callback' => 'saveFile',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // Retrieve a rendered file_entity form
  $items['imager/ajax/edit_form_load'] = array(
    'title' => 'Retrieve the edit form for a file_entity',
    'description' => 'Retrieve the edit form for a file_entity',
    'page callback' => 'editFormLoad',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // Retrieve a field from a rendered file_entity form
  $items['imager/ajax/edit_form_field_load'] = array(
    'title' => 'Retrieve a field from the edit form',
    'description' => 'Retrieve a field from the edit form',
    'page callback' => 'editFormFieldLoad',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // Delete a file_entity and it's image file
  $items['imager/ajax/delete_file'] = array(                                         
    'title' => 'Delete a file_entity from Drupal',
    'description' => 'Delete a file_entity from Drupal',
    'page callback' => 'deleteFile',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // Save a file_entity field
  $items['imager/ajax/save_file_entity_field'] = array( 
    'title' => 'Save file_entity field',
    'description' => 'Save a file_entity field',
    'page callback' => 'saveFileEntityField',
    'file' => 'imager.ajax.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Load JavaScript and CSS files
 * 
 * @todo drupal_add_js/css is being deprecated in D8 - use #attached instead
 *  
 * @global type $imagerModulePath 
 * @param type $cssSelector
 *   Finds thumbnails to add to image list - JQuery selector
 * @param type $viewMode
 *   View mode to render file_entities in - Default imager
 */
function imager_load_js_css($cssSelector,$viewMode) {
  global $user;
  global $imagerModulePath;

  $imagerModulePath = drupal_get_path('module', 'imager');
  drupal_add_js ($imagerModulePath . '/js/jquery-ui-1.10.4.min.js', array('weight' => 1002));
  drupal_add_library ('system', 'drupal.ajax');

  drupal_add_js(
    array(
      'imager' => array(
        'modulePath'  => $imagerModulePath,
        'cssSelector' => $cssSelector,
        'viewMode'    => $viewMode,
        'siteName'    => preg_replace('/\//','',$GLOBALS['base_path']),
      ),
    ),
    'setting'
  );
  drupal_add_js ($imagerModulePath . '/js/hoverintent.js',          array('weight' => 1003));
  drupal_add_js ($imagerModulePath . '/js/jquery.imgareaselect.js', array('weight' => 1005));
  drupal_add_js ($imagerModulePath . '/js/screenfull.js',           array('weight' => 1007));
  drupal_add_js ($imagerModulePath . '/js/imager.js',               array('weight' => 1009));

  drupal_add_css($imagerModulePath . '/css/imgareaselect-animated.css');
  drupal_add_css($imagerModulePath . '/css/imager.css');
}

/**
 * Implement HOOK_views_pre_view
 * 
 * Determine if this view needs imager module, if so load it
 */
function imager_views_pre_view(&$view, &$display_id, &$args) {
  if (preg_match('/media_gallery/',$view->name)) {
    imager_load_js_css('.imager > a > img','media_imager');
  }
  return;
}

function imager_views_pre_render(&$view) {
  return;
}

/**
 * Implement HOOK_theme
 */
function imager_theme() {
  return array(
    'imager_add_button' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Construct render array for a button
 * 
 * @todo Use buttons instead of images - is this function necessary? 
 * 
 * @param type $weight
 * @param type $id
 * @param type $src
 * @param type $title
 * @param type $classes
 * @return type
 */
function _imagerBuildButton($weight,$id,$src,$title,$classes = '') {
  $item = array(
    '#id'  => $id,
    '#weight' => $weight,
    '#title' => $title,
    '#src' => $src,
    '#theme'  => 'imager_add_button',
    '#classes' => $classes,
  );
  return $item;
}

/**
 * Render a button
 *  
 * @param type $variables
 * @return type
 */
function theme_imager_add_button($variables) {
  $element = $variables['element'];
  return '<img id="' . $element['#id'] .
         '" src="' . $GLOBALS["base_url"] . '/' . $GLOBALS["theme_path"] . '/icons/' . $element["#src"] . 
         '" alt="" title="' . $element['#title'] . '" class="' . $element['#classes'] . '">';
}


/**
 * Implement HOOK_page_alter
 * 
 * Create render arrays for imager popup
 * 
 * @todo Is there an earlier hook better suited for this?
 */
function imager_page_alter(&$page) {
  global $imagerModulePath;
  if (isset($imagerModulePath)) {
    $page['footer']['imager_wrapper'] = array(
      '#prefix' => '<div id="imager-wrapper">',
      '#suffix' => '</div>',
      '#weight' => -100,
      'overlay'    => _imagerBuildOverlay(),
      'brightness' => _imagerBuildBrightness(),
      'color'      => _imagerBuildColor(),
      'filesave'   => _imagerBuildFilesave(),
      'status'     => _imagerBuildStatus(),
      'info'       => _imagerBuildInfo(),
      'edit'       => _imagerBuildEdit(),
      'messages'   => _imagerBuildMessages(),
      'canvasorg'  => _imagerBuildCanvas(),
      'busy'       => _imagerBuildBusy(),
      'map'        => _imagerBuildMap(),
      'form'       => _imagerBuildForm(),
    );
  }
}

/**
 * Build render array for Large Image popup 
 * 
 * @return type render_array
 */
function _imagerBuildOverlay() {
  return array ( 
    '#prefix' => '<div id="imager-overlay">',
    '#suffix' => '</div>',
    'button_wrapper' => array(
      '#prefix' => '<div id="button-wrapper">',
      '#suffix' => '</div>',
      '#weight' => 1,
      'image_buttons' => array(
        '#prefix' => '<div id="image-buttons" class="buttons">',
        '#suffix' => '</div>',
        '#weight' => 1,
        'title' => array(
          '#type' => 'markup',
          '#markup' => t('Image'),
          '#prefix' => '<div>',
          '#suffix' => '</div>',
          '#weight' => 0,
        ),
        'image_left'  => _imagerBuildButton(1,'image-left','left_arrow.png','View image to the left'),
        'image_right' => _imagerBuildButton(2,'image-right','right_arrow.png','View image to the right'),
        'image_exit'  => _imagerBuildButton(3,'image-exit','redx.png','Exit image popup'),
      ),
      'mode_buttons' => array(
        '#prefix' => '<div id="mode-buttons" class="buttons">',
        '#suffix' => '</div>',
        '#weight' => 2,
        'title' => array(
          '#type' => 'markup',
          '#markup' => t('Mode'),
          '#prefix' => '<div>',
          '#suffix' => '</div>',
          '#weight' => 0,
        ),
        'mode_view'  => _imagerBuildButton(1,'mode-view','eye.png','Quick image viewing'),
        'mode_lock'  => _imagerBuildButton(2,'mode-lock','lock.png','Lock image to screen'),
      ),
      'view_buttons' => array(
        '#prefix' => '<div id="view-buttons" class="buttons">',
        '#suffix' => '</div>',
        '#weight' => 3,
        'title' => array(
          '#type' => 'markup',
          '#markup' => t('View'),
          '#prefix' => '<div>',
          '#suffix' => '</div>',
        ),
        'view_zoom_in'    => _imagerBuildButton(1,'view-zoom-in','zoomin.png','Zoom into the image'),
        'view_zoom_out'   => _imagerBuildButton(2,'view-zoom-out','zoomout.png','Zoom out of the image'),
        'view_fullscreen' => _imagerBuildButton(3,'view-fullscreen','fullscreen.png','View image full screen'),
        'view_info'       => _imagerBuildButton(4,'view-info','information.png','View Image information'),
        'view_map'        => _imagerBuildButton(5,'view-map','map.png','View map showing image locations for page'),
      ),
      'edit_buttons' => array(
        '#prefix' => '<div id="edit-buttons" class="buttons">',
        '#suffix' => '</div>',
        '#weight' => 4,
        'title' => array(
          '#type' => 'markup',
          '#markup' => t('Edit'),
          '#prefix' => '<div>',
          '#suffix' => '</div>',
        ),
        'mode_crop'       => _imagerBuildButton(1,'mode-crop','frame.png','Start crop - select area to crop'),
        'edit_crop'       => _imagerBuildButton(2,'edit-crop','scissors.png','Crop selected area'),
        'edit_brightness' => _imagerBuildButton(3,'edit-brightness','contrast.png','Edit brightness and contrast'),
        'edit_color'      => _imagerBuildButton(4,'edit-color','color_wheel.png','Edit Hue, Saturation and Lightness'),
        'edit_left'       => _imagerBuildButton(5,'edit-left','rotate-left.png','Rotate image 90 degrees counter-clockwise'),
        'edit_right'      => _imagerBuildButton(6,'edit-right','rotate-right.png','Rotate image 90 degrees clockwise'),
        'edit_reset'      => _imagerBuildButton(7,'view-reset','reset.png','Reset the image back to the original'),
      ),
      'file_buttons' => array(
        '#prefix' => '<div id="file-buttons" class="buttons">',
        '#suffix' => '</div>',
        '#weight' => 5,
        'title' => array(
          '#type' => 'markup',
          '#markup' => t('File'),
          '#prefix' => '<div>',
          '#suffix' => '</div>',
        ),
        'file_save'        => _imagerBuildButton(1,'file-save','floppy.png','Save edited image'),
        'file_download'    => _imagerBuildButton(2,'file-download','download.png','Download image to local file system','disabled'),
        'file_email'       => _imagerBuildButton(3,'file-email','mail.png','E-mail image','disabled'),
        'file_clipboard'   => _imagerBuildButton(4,'file-clipboard','clipboard.png','Send image to clipboard','disabled'),
        'file_delete'      => _imagerBuildButton(5,'file-delete','delete.png','Delete image'),
      ),
      'debug_buttons' => array(
        '#prefix' => '<div id="debug-buttons" class="buttons">',
        '#suffix' => '</div>',
        '#weight' => -5,
        'title' => array(
          '#type' => 'markup',
          '#markup' => t('Debug'),
          '#prefix' => '<div>',
          '#suffix' => '</div>',
        ),
        'debug_status'   => _imagerBuildButton(1,'debug-status','bug.png','Toggle status output'),
        'debug_messages' => _imagerBuildButton(2,'debug-messages','bug2.png','Toggle debug messages'),
      ),
    ),
    'imager_canvas_wrapper' => array(
      '#prefix' => '<div id="imager-canvas-wrapper">',
      '#suffix' => '</div>',
      '#weight' => 2,
      'imager_canvas' => array(
        '#prefix' => '<canvas id="imager-canvas">',
        '#suffix' => '</canvas>',
      ),
    ),
  ); 
}

/**
 * Build render array for brightness/contrast slidebar popup 
 * 
 * @return type render_array
 */
function _imagerBuildBrightness() {
  return array(
    '#prefix' => '<div id="imager-brightness">',
    '#suffix' => '</div>',
    'table' => array(
      '#theme' => 'table',
      '#rows' => array(
        array(
          'no_striping' => TRUE,
          'data' => array(
            t('Brightness'),
            '<input id="slider-brightness" class="slider" type="range" min="-100" max="100" step="1" />',
          ),
        ),
        array(
          'no_striping' => TRUE,
          'data' => array(
            t('Contrast'),
            '<input id="slider-contrast"   class="slider" type="range" min="-100" max="100" step="1" />',
          ),
        ),
      ),
    ),
    'apply' => array(
      '#prefix' => '<button id="brightness-apply">',
      '#suffix' => '</button>',
      '#type' => 'markup',
      '#markup' => t('Apply'),
    ),
    'reset' => array(
      '#prefix' => '<button id="brightness-reset">',
      '#suffix' => '</button>',
      '#type' => 'markup',
      '#markup' => t('Reset'),
    ),
    'cancel' => array(
      '#prefix' => '<button id="brightness-cancel">',
      '#suffix' => '</button>',
      '#type' => 'markup',
      '#markup' => t('Cancel'),
    ),
  );
}

/**
 * Build render array for HSL slider popup 
 * 
 * @return type render_array
 */
function _imagerBuildColor() {
  return array(
    '#prefix' => '<div id="imager-color">',
    '#suffix' => '</div>',
    'table' => array(
      '#theme' => 'table',
      '#rows' => array(
        array(
          'no_striping' => TRUE,
          'data' => array(
            t('Hue'),
            '<input id="slider-hue" class="slider" type="range" min="-100" max="100" step="1" />',
          ),
        ),
        array(
          'no_striping' => TRUE,
          'data' => array(
            t('Saturation'), 
            '<input id="slider-saturation" class="slider" type="range" min="-100" max="100" step="1" />',
          ),
        ),
        array(
          'no_striping' => TRUE,
          'data' => array(
            t('Lightness'),
            '<input id="slider-lightness"  class="slider" type="range" min="-100" max="100" step="1" />',
          ),
        ),
      ),
    ),
    'apply' => array(
      '#prefix' => '<button id="color-apply">',
      '#suffix' => '</button>',
      '#type' => 'markup',
      '#markup' => t('Apply'),
    ),
    'reset' => array(
      '#prefix' => '<button id="color-reset">',
      '#suffix' => '</button>',
      '#type' => 'markup',
      '#markup' => t('Reset'),
    ),
    'cancel' => array(
      '#prefix' => '<button id="color-cancel">',
      '#suffix' => '</button>',
      '#type' => 'markup',
      '#markup' => t('Cancel'),
    ),
  );
}

/**
 * Build render array for File Save popup
 *  
 * @return type render_array
 */
function _imagerBuildFilesave() {
  return array(
    '#prefix' => '<div id="imager-filesave">',
    '#suffix' => '</div>',
    'title'   => array(
      '#prefix' => '<div class="title">',
      '#suffix' => '</div>',
      '#type' => 'markup',
      '#markup' => t('Save file: <span id="save-file-name">bogus</span>'),
    ),
    'table' => array(
      '#theme' => 'table',
      '#rows' => array(
        array(
          'no_striping' => TRUE,
          'data' => array(
            '<input type="radio" name="resolution" value="screen" />',
            t('Screen'),
            array('id' => 'canvas-resolution'),
            array('id' => 'scale', 'rowspan' => 2),
          ),
        ),
        array(
          'no_striping' => TRUE,
          'data' => array(
            '<input type="radio" name="resolution" value="image-cropped" disabled>',
            t('Display Image'),
            array('id' => 'image-display-resolution'),
          ),
        ),
        array(
          'no_striping' => TRUE,
          'data' => array(
            '<input type="radio" name="resolution" value="image-full" checked="checked"',
            t('Full Image'),
            array('id' => 'image-full-resolution'),
          ),
        ),
      ),
    ),
    'new' => array(
      '#prefix' => '<button id="file-save-new">',
      '#suffix' => '</button>',
      '#type' => 'markup',
      '#markup' => t('New'),
    ),
    'overwrite' => array(
      '#prefix' => '<button id="file-save-overwrite">',
      '#suffix' => '</button>',
      '#type' => 'markup',
      '#markup' => t('Overwrite'),
    ),
    'cancel' => array(
      '#prefix' => '<button id="file-save-cancel">',
      '#suffix' => '</button>',
      '#type' => 'markup',
      '#markup' => t('Cancel'),
    ),
  );
}

/**
 * Build render array for current Status popup
 *  
 * @return type render_array
 */
function _imagerBuildStatus() {
  return array(
    '#prefix' => '<div id="imager-status">',
    '#suffix' => '</div>',
    '#type'   => 'markup',
    '#markup' => 'Placeholder for status popup',
  );
}

/**
 * Build render array for information dialog - displays rendered file_entity 
 * 
 * @return type render_array
 */
function _imagerBuildInfo() {
  return array(
    '#prefix' => '<div id="imager-info">',
    '#suffix' => '</div>',
    'content' => array(
      '#prefix' => '<div id="imager-info-content">',
      '#suffix' => '</div>',
      '#weight' => 1,
      '#type'   => 'markup',
      '#markup' => 'Placeholder for information popup',
    ),
    'buttons' => array(
      '#prefix' => '<div id="imager-info-buttons">',
      '#suffix' => '</div>',
      '#weight' => 2,
      'exit'  => _imagerBuildButton(1,'imager-info-exit','redx.png','Exit Information dialog'),
    ),
  );
}

/**
 * Build render array for file_entity field editing popup
 *  
 * @return type render_array
 */
function _imagerBuildEdit() {
  return array(
    '#prefix' => '<div id="imager-edit">',
    '#suffix' => '</div>',
    'content' => array(
      '#prefix' => '<div id="imager-edit-content">',
      '#suffix' => '</div>',
      '#weight' => 1,
      '#type'   => 'markup',
      '#markup' => 'Placeholder for edit popup',
    ),
    'buttons' => array(
      '#prefix' => '<div id="imager-edit-buttons">',
      '#suffix' => '</div>',
      '#weight' => 2,
      'apply'  => _imagerBuildButton(1,'imager-edit-apply','checkmark.png','Apply changes and exit'),
      'exit'   => _imagerBuildButton(2,'imager-edit-exit','redx.png','Exit Edit dialog'),
    ),
  );
}

/**
 * Build render array for Ajax and PHP debug message dialog
 *  
 * @return type render_array
 */
function _imagerBuildMessages() {
  return array(
    '#prefix' => '<div id="imager-messages">',
    '#suffix' => '</div>',
    '#type'   => 'markup',
    '#markup' => 'Placeholder for messages popup',
  );
}

/**
 * Build render array for hidden second canvas - used to save images  
 * 
 * @return type render_array
 */
function _imagerBuildCanvas() {
  return array(
    '#prefix' => '<canvas id="imager-canvas-org">',
    '#suffix' => '</canvas>',
  );
}

/**
 * Build render array for Busy indicator - busy.gif  
 * 
 * @global type $imagerModulePath
 * @return type render_array
 */
function _imagerBuildBusy() {
  global $imagerModulePath;
  return array(
    '#type'   => 'markup',
    '#markup' => '<img alt="" id="imager-busy" src="' . $GLOBALS['base_url'] . '/' . $imagerModulePath . '/icons/busy.gif">',
  );
}

/**
 * Build render array for map popup
 *  
 * @global type $imagerModulePath
 * @return type render_array
 */
function _imagerBuildMap() {
  global $imagerModulePath;
  return array(
    '#prefix' => '<div id="imager-map">',
    '#suffix' => '</div>',
    'content' => array(
      '#prefix' => '<div id="imager-map-content">',
      '#suffix' => '</div>',
      '#weight' => 1,
      '#type'   => 'markup',
      '#markup' => '<h3>Interactive Map - Under Construction</h3>' .
                   '<p>Full interactive map with markers showing all photos on originating page.  The current image will be centered and highlighted with a different color.</p><img alt="" id="imager-map-image" src="' . $GLOBALS['base_url'] . '/' . $imagerModulePath . '/icons/waterworld.png">',
    ),
    'buttons' => array(
      '#prefix' => '<div id="imager-map-buttons">',
      '#suffix' => '</div>',
      '#weight' => 2,
      'exit'   => _imagerBuildButton(2,'imager-map-exit','redx.png','Exit Map dialog'),
    ),
  );
}


/**
 * Load the file_entity_edit form - default form for image file type
 * 
 * Loading the full form as the page loads ensures all javascript libraries are
 * also loaded.  Complex file_entity edit forms use a lot of additional files:
 * - date popup
 * - autocomplete - entity reference
 * - ckeditor
 * - hierarchical select
 * - ...
 *  
 * @todo This form isn't used and is removed by imager.js.  A better approach
 * is to only load the necessary JavaScript and CSS files and not
 * render the form.
 * 
 * @return type render_array
 */
function _imagerBuildForm() {
  $form_id = 'file_entity_edit';
  $file = file_load(243);
  $form = drupal_get_form($form_id,$file);
  $div = array(
    '#prefix' => '<div id="imager-form">',
    '#suffix' => '</div>',
    '#type'   => 'markup',
    '#markup' => drupal_render($form),
  );
  return $div;
}



/**
 * Page callback: Form constructor for the file edit form.
 *
 * Path: file/%file/edit
 *
 * @param object $file
 *   A file object from file_load().
 *
 * @see file_entity_menu()
 *
 * @todo Rename this form to file_edit_form to ease into core.
 */
function imager_file_entity_edit($form, &$form_state) {
  drupal_set_title(t('<em>Edit @type</em> @title', array('@type' => $file->type, '@title' => $file->filename)), PASS_THROUGH);

//$form_state['file'] = $file;

  $form['#attributes']['class'][] = 'file-form';
//if (!empty($file->type)) {
//  $form['#attributes']['class'][] = 'file-' . $file->type . '-form';
//}

  // Basic file information.
  // These elements are just values so they are not even sent to the client.
  foreach (array('fid', 'type', 'uid', 'timestamp') as $key) {
    $form[$key] = array(
      '#type' => 'value',
//    '#value' => isset($file->$key) ? $file->$key : NULL,
    );
  }

  $form['filename'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
//  '#default_value' => $file->filename,
    '#required' => TRUE,
    '#maxlength' => 255,
    '#weight' => -10,
  );

  // Add a 'replace this file' upload field if the file is writeable.
  /*
  if (file_entity_file_is_writeable($file)) {
    // Set up replacement file validation.
    $replacement_options = array();
    // The replacement file must have the same extension as the original file.
    $replacement_options['file_extensions'] = pathinfo($file->uri, PATHINFO_EXTENSION);

    $form['replace_upload'] = array(
      '#type' => 'file',
      '#title' => t('Replace file'),
      '#description' => t('This file will replace the existing file. This action cannot be undone.'),
      '#upload_validators' => file_entity_get_upload_validators($replacement_options),
      '#pre_render' => array('file_entity_upload_validators_pre_render'),
    );
  } */

//$form['preview'] = file_view_file($file, 'preview');

  $form['additional_settings'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 99,
  );

  // File destination information for administrators.
  $form['destination'] = array(
    '#type' => 'fieldset',
//  '#access' => user_access('administer files') && file_entity_file_is_writeable($file),
    '#title' => t('Destination'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('file-form-destination'),
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'file_entity') . '/file_entity.js',
      ),
    ),
  );

  $options = array();
  foreach (file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE) as $scheme => $info) {
    $options[$scheme] = check_plain($info['name']);
  }

  $form['destination']['scheme'] = array(
    '#type' => 'radios',
    '#title' => t('Destination'),
    '#options' => $options,
//  '#default_value' => file_uri_scheme($file->uri),
  );

  // File user information for administrators.
  $form['user'] = array(
    '#type' => 'fieldset',
    '#access' => user_access('administer files'),
    '#title' => t('User information'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('file-form-user'),
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'file_entity') . '/file_entity.js',
        array(
          'type' => 'setting',
          'data' => array('anonymous' => variable_get('anonymous', t('Anonymous'))),
        ),
      ),
    ),
    '#weight' => 90,
  );
  $form['user']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Associated with'),
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
 // '#default_value' => !empty($file->uid) ? user_load($file->uid)->name : '',
    '#weight' => -1,
    '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
  );

  // Add the buttons.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 5,
    '#submit' => array('file_entity_edit_submit'),
  );
  $form['actions']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#weight' => 10,
    '#submit' => array('file_entity_edit_delete_submit'),
//  '#access' => file_entity_access('delete', $file),
  );

  /*
  // Build the URL for the cancel button taking into account that there might be
  // a "destination" that includes query string variables.
  $parameters = drupal_get_query_parameters();
  $destination = isset($parameters['destination']) ? $parameters['destination'] : 'file/' . $file->fid;
  $url = drupal_parse_url($destination);

  $form['actions']['cancel'] = array(
    '#type' => 'link',
    '#title' => t('Cancel'),
    '#href' => $url['path'],
    '#options' => array('query' => $url['query']),
    '#weight' => 15,
  );
   */

//$langcode = function_exists('entity_language') ? entity_language('file', $file) : NULL;
//field_attach_form('file', $file, $form, $form_state, $langcode);

  return $form;
}

